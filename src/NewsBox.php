<?php
/**
 * Main class for outputting the news box.
 *
 * @file
 * @ingroup Extensions
 * @author Jack Phoenix
 * @license https://en.wikipedia.org/wiki/Public_domain Public domain
 * @link https://www.mediawiki.org/wiki/Extension:NewsBox Documentation
 */
class NewsBox {
	/**
	 * Get the guts of the NewsBox as HTML; this includes the actual news messages
	 * and the other two or three links (Hub, CreateWiki and forum), but _excludes_
	 * the skin-specific box "shell".
	 *
	 * @param Skin|SkinMonaco $skin
	 * @return string HTML
	 */
	public static function getNewsBoxHTML( $skin ) {
		global $wgLangToCentralMap;

		$skinName = strtolower( $skin->getSkinName() );

		// Skip Aurora for now, as per discussion with Isarra on 11 January 2014
		// We need to do this here, because otherwise the "ShoutWiki messages"
		// header will be generated by the skin as we can't fool it into not
		// generating that
		// @see /skins/Aurora/Aurora.skin.php, function customBox()
		if ( $skinName == 'aurora' ) {
			return '';
		}

		$services = MediaWiki\MediaWikiServices::getInstance();
		$contLang = $services->getContentLanguage();
		$hubURL = !empty( $wgLangToCentralMap[$contLang->getCode()] ) ?
					$wgLangToCentralMap[$contLang->getCode()] :
					'http://www.shoutwiki.com/';

		// Assume site language code by default
		$langCode = $contLang->getCode();

		// Check for user preferences (registered users only)
		$user = $skin->getUser();
		if ( $user->isRegistered() ) {
			$langCode = $services->getUserOptionsManager()->getOption( $user, 'language' );
		}

		// Uselang parameter in URL
		$useLang = $skin->getRequest()->getRawVal( 'uselang' );
		if ( $useLang && $services->getLanguageNameUtils()->isValidCode( $useLang ) ) {
			$langCode = $useLang;
		}

		// English is a bit of a special case, as we don't want the link to point
		// to [[MediaWiki:Newsbox/en]] or [[MediaWiki:Newsbox/en-gb]] as we will
		// use ShoutWiki Hub's default Newsbox message for English-language wikis
		// as ShoutWiki Hub is an English wiki
		$isEnglish = in_array( $langCode, [ 'en', 'en-ca', 'en-gb' ] );
		if ( $isEnglish ) {
			$message = $skin->msg( 'newsbox' );
		} else {
			$message = $skin->msg( 'newsbox' )->inLanguage( $langCode );
		}

		$forumURL = $skin->msg( 'newsbox-forum-url' )->inLanguage( 'en' );

		// Eminence needs extra <span> tags around the link titles and even
		// around the NewsBox content in order not to look overly fugly, whereas
		// BlueCloud requires the ul to have class="navlist" and the <hr />
		// looks bad on BlueCloud so it had to be removed...skins are fun.
		$templateParser = new TemplateParser( __DIR__ . '/../templates' );
		$templatedSpecialCases = [ 'bluecloud', 'eminence', 'monaco' ];

		$templateParams = [
			'hubURL' => $hubURL,
			'newsbox-homepage' => $skin->msg( 'newsbox-homepage' )->text(),
			'newsbox-createwiki' => $skin->msg( 'newsbox-createwiki' )->text(),
			'showForumLink' => !$forumURL->isDisabled(),
			'forumURL' => $forumURL->text(),
			'newsbox-forum' => $skin->msg( 'newsbox-forum' )->text(),
			'hasNews' => !$message->isBlank(),
			'newsBoxContents' => $message->parse()
		];

		if ( $skinName === 'monaco' ) {
			// For Monaco we also need the NewsBox title
			$templateParams = array_merge( [
				'newsbox-title' => $skin->msg( 'newsbox-title' )->text(),
			], $templateParams );
		}

		$out = $templateParser->processTemplate(
			( in_array( $skinName, $templatedSpecialCases ) ? 'newsbox-' . $skinName : 'newsbox-default' ),
			$templateParams
		);

		return $out;
	}

	/**
	 * Sets up the news box area for most skins.
	 *
	 * Actual rendering is done in onSkinAfterPortlet() below as of MW 1.39+.
	 *
	 * Known exceptions include:
	 * 1) Nimbus (in-skin NewsBox support)
	 * 2) Monaco (renderForMonaco() below)
	 *
	 * @param Skin $skin Instance of Skin class or its subclass
	 * @param string &$bar
	 */
	public static function render( Skin $skin, &$bar ) {
		$bar['newsbox-title'] = [];
	}

	/**
	 * Prints the news box.
	 *
	 * @param Skin $skin Instance of Skin class or its subclass
	 * @param string $portlet Portlet name, either an internal one (e.g. "tb", "lang", etc.) or a
	 *                        user-controlled string for [[MediaWiki:Sidebar]] top-level entries
	 * @param string &$html The HTML we want to inject to the output
	 */
	public static function onSkinAfterPortlet( Skin $skin, string $portlet, string &$html ) {
		if ( $portlet === 'newsbox-title' ) {
			$html .= self::getNewsBoxHTML( $skin );
		}
	}

	/**
	 * The Monaco skin is a special case, as it overrides the buildSidebar()
	 * function, which is where SkinBuildSidebar hook is.
	 *
	 * @param SkinMonaco $monaco
	 * @param MonacoTemplate $tpl
	 */
	public static function renderForMonaco( $monaco, $tpl ) {
		echo self::getNewsBoxHTML( $monaco ) . "\n";
	}
}
