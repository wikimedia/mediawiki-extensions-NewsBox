<?php
/**
 * Main class for outputting the news box on most skins.
 *
 * @file
 * @ingroup Extensions
 * @author Jack Phoenix
 * @license https://en.wikipedia.org/wiki/Public_domain Public domain
 * @link https://www.mediawiki.org/wiki/Extension:NewsBox Documentation
 * @todo FIXME: epic code duplication between render() and renderForMonaco()
 * @todo FIXME: home page/CW link/forum link should all be rendered via something
 *              like Skin::addToSidebarPlain() so that we could put all of those
 *              into one i18n message and render that message for all skins
 *              instead of fiddling around with stupid switch() loops and whatnot
 */
class NewsBox {
	/**
	 * Prints the news box.
	 *
	 * @param Skin $skin Instance of Skin class or its subclass
	 * @param array &$bar
	 * @return true|void
	 */
	public static function render( $skin, &$bar ) {
		global $wgLangToCentralMap;

		$skinName = strtolower( $skin->getSkinName() );

		// Skip Aurora for now, as per discussion with Isarra on 11 January 2014
		// We need to do this here, because otherwise the "ShoutWiki messages"
		// header will be generated by the skin as we can't fool it into not
		// generating that
		// @see /skins/Aurora/Aurora.skin.php, function customBox()
		//
		// Also skip Vector entirely as of MW 1.35+; due to the internal changes in
		// Vector it doesn't seem to be possible to render the NewsBox properly in
		// it anymore, sadly. --ashley, 10 November 2020
		if ( $skinName == 'aurora' || $skinName == 'vector' ) {
			return true;
		}

		$contLang = MediaWiki\MediaWikiServices::getInstance()->getContentLanguage();
		$hubURL = !empty( $wgLangToCentralMap[$contLang->getCode()] ) ?
					$wgLangToCentralMap[$contLang->getCode()] :
					'http://www.shoutwiki.com/';

		// Assume site language code by default
		$langCode = $contLang->getCode();

		// Check for user preferences (registered users only)
		$user = $skin->getUser();
		if ( $user->isRegistered() ) {
			$langCode = MediaWiki\MediaWikiServices::getInstance()->getUserOptionsManager()
				->getOption( $user, 'language' );
		}

		// Uselang parameter in URL
		$useLang = $skin->getRequest()->getRawVal( 'uselang' );
		if ( $useLang && Language::isValidCode( $useLang ) ) {
			$langCode = $useLang;
		}

		// English is a bit of a special case, as we don't want the link to point
		// to [[MediaWiki:Newsbox/en]] or [[MediaWiki:Newsbox/en-gb]] as we will
		// use ShoutWiki Hub's default Newsbox message for English-language wikis
		// as ShoutWiki Hub is an English wiki
		$isEnglish = in_array( $langCode, [ 'en', 'en-ca', 'en-gb' ] );
		if ( $isEnglish ) {
			$message = $skin->msg( 'newsbox' );
		} else {
			$message = $skin->msg( 'newsbox' )->inLanguage( $langCode );
		}

		$forumURL = $skin->msg( 'newsbox-forum-url' )->inLanguage( 'en' );

		// Eminence needs extra <span> tags around the link titles and even
		// around the NewsBox content in order not to look overly fugly, whereas
		// BlueCloud requires the ul to have class="navlist" and the <hr />
		// looks bad on BlueCloud so it had to be removed...skins are fun.
		$templateParser = new TemplateParser( __DIR__ . '/../templates' );
		$templatedSpecialCases = [ 'bluecloud', 'eminence' ];
		$out = $templateParser->processTemplate(
			( in_array( $skinName, $templatedSpecialCases ) ? 'newsbox-' . $skinName : 'newsbox-default' ),
			[
				'hubURL' => $hubURL,
				'newsbox-homepage' => $skin->msg( 'newsbox-homepage' )->text(),
				'newsbox-createwiki' => $skin->msg( 'newsbox-createwiki' )->text(),
				'showForumLink' => !$forumURL->isDisabled(),
				'forumURL' => $forumURL->text(),
				'newsbox-forum' => $skin->msg( 'newsbox-forum' )->text(),
				'hasNews' => !$message->isBlank(),
				'newsBoxContents' => $message->parse()
			]
		);

		$bar['newsbox-title'] = $out;
	}

	/**
	 * The Monaco skin is a special case, as it overrides the buildSidebar()
	 * function, which is where SkinBuildSidebar hook is.
	 *
	 * @param SkinMonaco $monaco
	 * @param MonacoTemplate $tpl
	 */
	public static function renderForMonaco( $monaco, $tpl ) {
		global $wgLangToCentralMap;

		$contLang = MediaWiki\MediaWikiServices::getInstance()->getContentLanguage();
		$hubURL = !empty( $wgLangToCentralMap[$contLang->getCode()] ) ?
					$wgLangToCentralMap[$contLang->getCode()] :
					'http://www.shoutwiki.com/';

		// Assume site language code by default
		$langCode = $contLang->getCode();

		// Check for user preferences (registered users only)
		$user = $monaco->getUser();
		if ( $user->isRegistered() ) {
			$langCode = MediaWiki\MediaWikiServices::getInstance()->getUserOptionsManager()
				->getOption( $user, 'language' );
		}

		// Uselang parameter in URL
		$useLang = $monaco->getRequest()->getRawVal( 'uselang' );
		if ( $useLang && Language::isValidCode( $useLang ) ) {
			$langCode = $useLang;
		}

		// English is a bit of a special case, as we don't want the link to point
		// to [[MediaWiki:Newsbox/en]] or [[MediaWiki:Newsbox/en-gb]] as we will
		// use ShoutWiki Hub's default Newsbox message for English-language wikis
		// as ShoutWiki Hub is an English wiki
		$isEnglish = in_array( $langCode, [ 'en', 'en-ca', 'en-gb' ] );
		if ( $isEnglish ) {
			$message = $monaco->msg( 'newsbox' );
		} else {
			$message = $monaco->msg( 'newsbox' )->inLanguage( $langCode );
		}

		$forumURL = $monaco->msg( 'newsbox-forum-url' )->inLanguage( 'en' );
		echo ( new TemplateParser( __DIR__ . '/../templates' ) )->processTemplate(
			'newsbox-monaco',
			[
				'newsbox-title' => $monaco->msg( 'newsbox-title' )->text(),
				'hubURL' => $hubURL,
				'newsbox-homepage' => $monaco->msg( 'newsbox-homepage' )->text(),
				'newsbox-createwiki' => $monaco->msg( 'newsbox-createwiki' )->text(),
				'showForumLink' => !$forumURL->isDisabled(),
				'forumURL' => $forumURL->text(),
				'newsbox-forum' => $monaco->msg( 'newsbox-forum' )->text(),
				'hasNews' => !$message->isBlank(),
				'newsBoxContents' => $message->parse()
			]
		) . "\n";
	}
}
